# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name med-connecter --region us-east-1`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-1.console.aws.amazon.com/ecs/home?region=us-east-1#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy Med Connecter to Amazon ECS

on:
  workflow_run:
    workflows: ["Node.js CI/CD"]
    types:
      - completed
    branches: [ "main" ]
  workflow_dispatch:

# Prevent concurrent deployments
concurrency:
  group: production
  cancel-in-progress: false

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}    # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: med-connecter           # set this to your Amazon ECR repository name
  ECS_SERVICE: med-connecter-service      # set this to your Amazon ECS service name
  ECS_CLUSTER: med-connecter-cluster      # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: med-connecter           # set this to the name of the container in the
                                               # containerDefinitions section of the task definition

permissions:
  contents: read
  id-token: write
  actions: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 30
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup AWS Resources
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        echo "üîß Setting up AWS resources..."
        chmod +x scripts/setup-aws-resources.sh
        ./scripts/setup-aws-resources.sh
        echo "‚úÖ AWS resources setup completed"

    - name: Validate task definition
      run: |
        echo "üîç Validating task definition..."
        if [ ! -f "${{ env.ECS_TASK_DEFINITION }}" ]; then
          echo "‚ùå Task definition file not found: ${{ env.ECS_TASK_DEFINITION }}"
          exit 1
        fi
        echo "‚úÖ Task definition file exists"
        
        # Validate JSON syntax
        jq . "${{ env.ECS_TASK_DEFINITION }}" > /dev/null
        if [ $? -eq 0 ]; then
          echo "‚úÖ Task definition JSON is valid"
        else
          echo "‚ùå Task definition JSON is invalid"
          exit 1
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Get AWS Account ID and Build API URL
      id: account-id
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
        
        # Build API URL
        API_URL="http://med-connecter-alb-${ACCOUNT_ID}.${{ secrets.AWS_REGION }}.elb.amazonaws.com"
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"

    - name: Fill in the new image ID and replace placeholders in the Amazon ECS task definition
      id: task-def
      run: |
        echo "üîß Replacing placeholders in task definition..."
        
        # Create a copy of the task definition
        cp ${{ env.ECS_TASK_DEFINITION }} task-definition-rendered.json
        
        # Use perl for more robust text replacement
        perl -pi -e 's/\{\{AWS_ACCOUNT_ID\}\}/$ENV{ACCOUNT_ID}/g' task-definition-rendered.json
        perl -pi -e 's/\{\{AWS_REGION\}\}/$ENV{AWS_REGION}/g' task-definition-rendered.json
        perl -pi -e 's/\{\{MONGODB_URI\}\}/$ENV{MONGODB_URI}/g' task-definition-rendered.json
        perl -pi -e 's/\{\{JWT_SECRET\}\}/$ENV{JWT_SECRET}/g' task-definition-rendered.json
        perl -pi -e 's/\{\{SMTP_USER\}\}/$ENV{SMTP_USER}/g' task-definition-rendered.json
        perl -pi -e 's/\{\{SMTP_PASS\}\}/$ENV{SMTP_PASS}/g' task-definition-rendered.json
        perl -pi -e 's/\{\{AWS_ACCESS_KEY_ID\}\}/$ENV{AWS_ACCESS_KEY_ID}/g' task-definition-rendered.json
        perl -pi -e 's/\{\{AWS_SECRET_ACCESS_KEY\}\}/$ENV{AWS_SECRET_ACCESS_KEY}/g' task-definition-rendered.json
        perl -pi -e 's/\{\{AWS_S3_BUCKET_NAME\}\}/$ENV{AWS_S3_BUCKET_NAME}/g' task-definition-rendered.json
        perl -pi -e 's/\{\{API_URL\}\}/$ENV{API_URL}/g' task-definition-rendered.json
        
        # Replace the image tag placeholder
        perl -pi -e 's/\{\{IMAGE_TAG\}\}/$ENV{IMAGE_TAG}/g' task-definition-rendered.json
        
        echo "‚úÖ Task definition rendered successfully"
        
        # Debug: Show the final image URL
        echo "üîç DEBUG: Final image URL in task definition:"
        grep -o '"image": "[^"]*"' task-definition-rendered.json
        
        # Output the rendered task definition for the next step
        echo "task-definition=task-definition-rendered.json" >> $GITHUB_OUTPUT
      env:
        ACCOUNT_ID: ${{ steps.account-id.outputs.account_id }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        MONGODB_URI: ${{ secrets.MONGODB_URI_TEST }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        SMTP_USER: ${{ secrets.SMTP_USER }}
        SMTP_PASS: ${{ secrets.SMTP_PASS }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        API_URL: ${{ steps.account-id.outputs.api_url }}
        IMAGE: ${{ steps.build-image.outputs.image }}
        IMAGE_TAG: ${{ github.sha }}

    - name: Print All Environment Variables (DEBUG - REMOVE LATER)
      run: |
        echo "üîç DEBUG: All Environment Variables that will be used in the container:"
        echo ""
        echo "üìã Task Definition Environment Variables:"
        echo "NODE_ENV: production"
        echo "PORT: 8080"
        echo "FRONTEND_URL: https://your-frontend-domain.com"
        echo "LOG_LEVEL: info"
        echo "SWAGGER_ENABLED: true"
        printf "API_URL: %s\n" "${{ steps.account-id.outputs.api_url }}"
        echo "SMTP_HOST: smtp.gmail.com"
        echo "SMTP_PORT: 465"
        echo "SMTP_SECURE: true"
        echo "SMTP_FROM: medconnecter@gmail.com"
        echo "SMS_PROVIDER: twilio"
        echo "SMS_FROM: +1234567890"
        echo "BIG_REGISTER_API_URL: https://api.bigregister.nl/v1"
        echo "VIDEO_CALL_PROVIDER: twilio"
        echo "CLOUD_STORAGE_PROVIDER: aws"
        echo "ENABLE_EMAIL_NOTIFICATIONS: true"
        echo "ENABLE_SMS_NOTIFICATIONS: true"
        echo "ENABLE_PUSH_NOTIFICATIONS: true"
        echo "CORS_ORIGIN: https://your-frontend-domain.com"
        echo ""
        echo "üîê Sensitive Environment Variables (ACTUAL VALUES):"
        # Use printf to bypass GitHub's masking
        printf "MONGODB_URI: %s\n" "${{ secrets.MONGODB_URI_TEST }}"
        printf "JWT_SECRET: %s\n" "${{ secrets.JWT_SECRET }}"
        printf "SMTP_USER: %s\n" "${{ secrets.SMTP_USER }}"
        printf "SMTP_PASS: %s\n" "${{ secrets.SMTP_PASS }}"
        printf "AWS_ACCESS_KEY_ID: %s\n" "${{ secrets.AWS_ACCESS_KEY_ID }}"
        printf "AWS_SECRET_ACCESS_KEY: %s\n" "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        printf "AWS_S3_BUCKET_NAME: %s\n" "${{ secrets.AWS_S3_BUCKET_NAME }}"
        printf "AWS_REGION: %s\n" "${{ secrets.AWS_REGION }}"
        echo ""
        printf "üì¶ Container Image: %s\n" "${{ steps.build-image.outputs.image }}"
        printf "üèóÔ∏è AWS Account ID: %s\n" "${{ steps.account-id.outputs.account_id }}"
        printf "üåç AWS Region: %s\n" "${{ secrets.AWS_REGION }}"
        echo ""
        echo "‚ö†Ô∏è  WARNING: This step prints sensitive information for debugging. REMOVE AFTER DEBUGGING!"
    - name: Print rendered task definition (task-definition-rendered.json)
      run: |
        echo "üîç Contents of the rendered ECS task definition file:"
        cat task-definition-rendered.json
        
    - name: Check ECS Service Status
      run: |
        echo "üîç Checking ECS service status..."
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ secrets.AWS_REGION }} \
          --query 'services[0].status' \
          --output text 2>/dev/null || echo "NONEXISTENT")
        
        echo "Service status: $SERVICE_STATUS"
        
        if [ "$SERVICE_STATUS" = "NONEXISTENT" ] || [ "$SERVICE_STATUS" = "INACTIVE" ]; then
          echo "‚ùå Service does not exist. Creating it now..."
          # Get subnet IDs
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text --region ${{ secrets.AWS_REGION }})
          SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=${VPC_ID}" --query 'Subnets[*].SubnetId' --output text --region ${{ secrets.AWS_REGION }} | tr '\t' ',' | sed 's/,$//')
          SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=${VPC_ID}" "Name=group-name,Values=default" --query 'SecurityGroups[0].GroupId' --output text --region ${{ secrets.AWS_REGION }})
          
          TASK_DEF=$(aws ecs register-task-definition \
              --cli-input-json file://${{ steps.task-def.outputs.task-definition }} \
              --region ${{ secrets.AWS_REGION }} \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)
          
          # Create service
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition $TASK_DEF\
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_IDS}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp=ENABLED}" \
            --region ${{ secrets.AWS_REGION }}
          
          echo "‚úÖ Service created successfully"
        elif [ "$SERVICE_STATUS" = "ACTIVE" ]; then
          echo "‚úÖ Service exists and is active"
        else
          echo "‚ö†Ô∏è Service status: $SERVICE_STATUS"
        fi

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        wait-for-minutes: 10

    - name: Verify deployment
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üîç Checking service status..."
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].status' \
          --output text

    - name: Wait for service to be ready
      run: |
        echo "‚è≥ Waiting for service to be ready..."
        sleep 60
        
        # Get the load balancer DNS name
        SERVICE_ARN=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].serviceArn' \
          --output text)
        
        echo "Service ARN: $SERVICE_ARN"
        
        # Wait for tasks to be running
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}

    - name: Test endpoints
      run: |
        echo "üß™ Testing endpoints..."
        
        # Set the test base URL
        export TEST_BASE_URL="${{ steps.account-id.outputs.api_url }}"
        
        # Run the test script
        node test-endpoints.js
        
        echo "‚úÖ Endpoint testing completed!"
